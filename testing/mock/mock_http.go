// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/firmeve/firmeve/kernel/contract (interfaces: Protocol,HttpProtocol,HttpRoute,HttpRouteGroup,HttpRouter)

// Package mock is a generated GoMock package.
package mock

import (
	contract "github.com/firmeve/firmeve/kernel/contract"
	gomock "github.com/golang/mock/gomock"
	httprouter "github.com/julienschmidt/httprouter"
	http "net/http"
	reflect "reflect"
)

// MockProtocol is a mock of Protocol interface
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// Application mocks base method
func (m *MockProtocol) Application() contract.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(contract.Application)
	return ret0
}

// Application indicates an expected call of Application
func (mr *MockProtocolMockRecorder) Application() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockProtocol)(nil).Application))
}

// Clone mocks base method
func (m *MockProtocol) Clone() contract.Protocol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(contract.Protocol)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockProtocolMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockProtocol)(nil).Clone))
}

// Message mocks base method
func (m *MockProtocol) Message() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Message indicates an expected call of Message
func (mr *MockProtocolMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockProtocol)(nil).Message))
}

// Metadata mocks base method
func (m *MockProtocol) Metadata() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// Metadata indicates an expected call of Metadata
func (mr *MockProtocolMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockProtocol)(nil).Metadata))
}

// Name mocks base method
func (m *MockProtocol) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProtocolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProtocol)(nil).Name))
}

// Read mocks base method
func (m *MockProtocol) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockProtocolMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockProtocol)(nil).Read), arg0)
}

// Values mocks base method
func (m *MockProtocol) Values() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// Values indicates an expected call of Values
func (mr *MockProtocolMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockProtocol)(nil).Values))
}

// Write mocks base method
func (m *MockProtocol) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockProtocolMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockProtocol)(nil).Write), arg0)
}

// MockHttpProtocol is a mock of HttpProtocol interface
type MockHttpProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockHttpProtocolMockRecorder
}

// MockHttpProtocolMockRecorder is the mock recorder for MockHttpProtocol
type MockHttpProtocolMockRecorder struct {
	mock *MockHttpProtocol
}

// NewMockHttpProtocol creates a new mock instance
func NewMockHttpProtocol(ctrl *gomock.Controller) *MockHttpProtocol {
	mock := &MockHttpProtocol{ctrl: ctrl}
	mock.recorder = &MockHttpProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpProtocol) EXPECT() *MockHttpProtocolMockRecorder {
	return m.recorder
}

// Accept mocks base method
func (m *MockHttpProtocol) Accept() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Accept indicates an expected call of Accept
func (mr *MockHttpProtocolMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockHttpProtocol)(nil).Accept))
}

// Application mocks base method
func (m *MockHttpProtocol) Application() contract.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(contract.Application)
	return ret0
}

// Application indicates an expected call of Application
func (mr *MockHttpProtocolMockRecorder) Application() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockHttpProtocol)(nil).Application))
}

// ClientIP mocks base method
func (m *MockHttpProtocol) ClientIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientIP indicates an expected call of ClientIP
func (mr *MockHttpProtocolMockRecorder) ClientIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientIP", reflect.TypeOf((*MockHttpProtocol)(nil).ClientIP))
}

// Clone mocks base method
func (m *MockHttpProtocol) Clone() contract.Protocol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(contract.Protocol)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockHttpProtocolMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockHttpProtocol)(nil).Clone))
}

// ContentType mocks base method
func (m *MockHttpProtocol) ContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// ContentType indicates an expected call of ContentType
func (mr *MockHttpProtocolMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockHttpProtocol)(nil).ContentType))
}

// Cookie mocks base method
func (m *MockHttpProtocol) Cookie(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cookie", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cookie indicates an expected call of Cookie
func (mr *MockHttpProtocolMockRecorder) Cookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cookie", reflect.TypeOf((*MockHttpProtocol)(nil).Cookie), arg0)
}

// Header mocks base method
func (m *MockHttpProtocol) Header(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Header indicates an expected call of Header
func (mr *MockHttpProtocolMockRecorder) Header(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockHttpProtocol)(nil).Header), arg0)
}

// IsAccept mocks base method
func (m *MockHttpProtocol) IsAccept(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccept", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAccept indicates an expected call of IsAccept
func (mr *MockHttpProtocolMockRecorder) IsAccept(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccept", reflect.TypeOf((*MockHttpProtocol)(nil).IsAccept), arg0)
}

// IsContentType mocks base method
func (m *MockHttpProtocol) IsContentType(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContentType", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContentType indicates an expected call of IsContentType
func (mr *MockHttpProtocolMockRecorder) IsContentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContentType", reflect.TypeOf((*MockHttpProtocol)(nil).IsContentType), arg0)
}

// IsMethod mocks base method
func (m *MockHttpProtocol) IsMethod(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMethod", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMethod indicates an expected call of IsMethod
func (mr *MockHttpProtocolMockRecorder) IsMethod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMethod", reflect.TypeOf((*MockHttpProtocol)(nil).IsMethod), arg0)
}

// Message mocks base method
func (m *MockHttpProtocol) Message() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Message indicates an expected call of Message
func (mr *MockHttpProtocolMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockHttpProtocol)(nil).Message))
}

// Metadata mocks base method
func (m *MockHttpProtocol) Metadata() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// Metadata indicates an expected call of Metadata
func (mr *MockHttpProtocolMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockHttpProtocol)(nil).Metadata))
}

// Name mocks base method
func (m *MockHttpProtocol) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockHttpProtocolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHttpProtocol)(nil).Name))
}

// Param mocks base method
func (m *MockHttpProtocol) Param(arg0 string) httprouter.Param {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", arg0)
	ret0, _ := ret[0].(httprouter.Param)
	return ret0
}

// Param indicates an expected call of Param
func (mr *MockHttpProtocolMockRecorder) Param(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockHttpProtocol)(nil).Param), arg0)
}

// Params mocks base method
func (m *MockHttpProtocol) Params() []httprouter.Param {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].([]httprouter.Param)
	return ret0
}

// Params indicates an expected call of Params
func (mr *MockHttpProtocolMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockHttpProtocol)(nil).Params))
}

// Read mocks base method
func (m *MockHttpProtocol) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockHttpProtocolMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockHttpProtocol)(nil).Read), arg0)
}

// Redirect mocks base method
func (m *MockHttpProtocol) Redirect(arg0 int, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Redirect", arg0, arg1)
}

// Redirect indicates an expected call of Redirect
func (mr *MockHttpProtocolMockRecorder) Redirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockHttpProtocol)(nil).Redirect), arg0, arg1)
}

// Request mocks base method
func (m *MockHttpProtocol) Request() *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockHttpProtocolMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockHttpProtocol)(nil).Request))
}

// ResponseWriter mocks base method
func (m *MockHttpProtocol) ResponseWriter() contract.HttpWrapResponseWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseWriter")
	ret0, _ := ret[0].(contract.HttpWrapResponseWriter)
	return ret0
}

// ResponseWriter indicates an expected call of ResponseWriter
func (mr *MockHttpProtocolMockRecorder) ResponseWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseWriter", reflect.TypeOf((*MockHttpProtocol)(nil).ResponseWriter))
}

// Route mocks base method
func (m *MockHttpProtocol) Route() contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route")
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// Route indicates an expected call of Route
func (mr *MockHttpProtocolMockRecorder) Route() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockHttpProtocol)(nil).Route))
}

// Session mocks base method
func (m *MockHttpProtocol) Session() contract.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session")
	ret0, _ := ret[0].(contract.Session)
	return ret0
}

// Session indicates an expected call of Session
func (mr *MockHttpProtocolMockRecorder) Session() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockHttpProtocol)(nil).Session))
}

// SessionValue mocks base method
func (m *MockHttpProtocol) SessionValue(arg0 string) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionValue", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// SessionValue indicates an expected call of SessionValue
func (mr *MockHttpProtocolMockRecorder) SessionValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionValue", reflect.TypeOf((*MockHttpProtocol)(nil).SessionValue), arg0)
}

// SetCookie mocks base method
func (m *MockHttpProtocol) SetCookie(arg0 *http.Cookie) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCookie", arg0)
}

// SetCookie indicates an expected call of SetCookie
func (mr *MockHttpProtocolMockRecorder) SetCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockHttpProtocol)(nil).SetCookie), arg0)
}

// SetHeader mocks base method
func (m *MockHttpProtocol) SetHeader(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", arg0, arg1)
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockHttpProtocolMockRecorder) SetHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockHttpProtocol)(nil).SetHeader), arg0, arg1)
}

// SetParams mocks base method
func (m *MockHttpProtocol) SetParams(arg0 []httprouter.Param) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParams", arg0)
}

// SetParams indicates an expected call of SetParams
func (mr *MockHttpProtocolMockRecorder) SetParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockHttpProtocol)(nil).SetParams), arg0)
}

// SetRoute mocks base method
func (m *MockHttpProtocol) SetRoute(arg0 contract.HttpRoute) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRoute", arg0)
}

// SetRoute indicates an expected call of SetRoute
func (mr *MockHttpProtocolMockRecorder) SetRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRoute", reflect.TypeOf((*MockHttpProtocol)(nil).SetRoute), arg0)
}

// SetSession mocks base method
func (m *MockHttpProtocol) SetSession(arg0 contract.Session) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSession", arg0)
}

// SetSession indicates an expected call of SetSession
func (mr *MockHttpProtocolMockRecorder) SetSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSession", reflect.TypeOf((*MockHttpProtocol)(nil).SetSession), arg0)
}

// SetStatus mocks base method
func (m *MockHttpProtocol) SetStatus(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockHttpProtocolMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockHttpProtocol)(nil).SetStatus), arg0)
}

// Values mocks base method
func (m *MockHttpProtocol) Values() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// Values indicates an expected call of Values
func (mr *MockHttpProtocolMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockHttpProtocol)(nil).Values))
}

// Write mocks base method
func (m *MockHttpProtocol) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockHttpProtocolMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockHttpProtocol)(nil).Write), arg0)
}

// MockHttpRoute is a mock of HttpRoute interface
type MockHttpRoute struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteMockRecorder
}

// MockHttpRouteMockRecorder is the mock recorder for MockHttpRoute
type MockHttpRouteMockRecorder struct {
	mock *MockHttpRoute
}

// NewMockHttpRoute creates a new mock instance
func NewMockHttpRoute(ctrl *gomock.Controller) *MockHttpRoute {
	mock := &MockHttpRoute{ctrl: ctrl}
	mock.recorder = &MockHttpRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRoute) EXPECT() *MockHttpRouteMockRecorder {
	return m.recorder
}

// Handlers mocks base method
func (m *MockHttpRoute) Handlers() []contract.ContextHandler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handlers")
	ret0, _ := ret[0].([]contract.ContextHandler)
	return ret0
}

// Handlers indicates an expected call of Handlers
func (mr *MockHttpRouteMockRecorder) Handlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handlers", reflect.TypeOf((*MockHttpRoute)(nil).Handlers))
}

// Name mocks base method
func (m *MockHttpRoute) Name(arg0 string) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name", arg0)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockHttpRouteMockRecorder) Name(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockHttpRoute)(nil).Name), arg0)
}

// Use mocks base method
func (m *MockHttpRoute) Use(arg0 ...contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockHttpRouteMockRecorder) Use(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockHttpRoute)(nil).Use), arg0...)
}

// MockHttpRouteGroup is a mock of HttpRouteGroup interface
type MockHttpRouteGroup struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouteGroupMockRecorder
}

// MockHttpRouteGroupMockRecorder is the mock recorder for MockHttpRouteGroup
type MockHttpRouteGroupMockRecorder struct {
	mock *MockHttpRouteGroup
}

// NewMockHttpRouteGroup creates a new mock instance
func NewMockHttpRouteGroup(ctrl *gomock.Controller) *MockHttpRouteGroup {
	mock := &MockHttpRouteGroup{ctrl: ctrl}
	mock.recorder = &MockHttpRouteGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouteGroup) EXPECT() *MockHttpRouteGroupMockRecorder {
	return m.recorder
}

// DELETE mocks base method
func (m *MockHttpRouteGroup) DELETE(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DELETE", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// DELETE indicates an expected call of DELETE
func (mr *MockHttpRouteGroupMockRecorder) DELETE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockHttpRouteGroup)(nil).DELETE), arg0, arg1)
}

// GET mocks base method
func (m *MockHttpRouteGroup) GET(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// GET indicates an expected call of GET
func (mr *MockHttpRouteGroupMockRecorder) GET(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHttpRouteGroup)(nil).GET), arg0, arg1)
}

// Group mocks base method
func (m *MockHttpRouteGroup) Group(arg0 string) contract.HttpRouteGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(contract.HttpRouteGroup)
	return ret0
}

// Group indicates an expected call of Group
func (mr *MockHttpRouteGroupMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockHttpRouteGroup)(nil).Group), arg0)
}

// Handler mocks base method
func (m *MockHttpRouteGroup) Handler(arg0, arg1 string, arg2 http.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handler", arg0, arg1, arg2)
}

// Handler indicates an expected call of Handler
func (mr *MockHttpRouteGroupMockRecorder) Handler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHttpRouteGroup)(nil).Handler), arg0, arg1, arg2)
}

// OPTIONS mocks base method
func (m *MockHttpRouteGroup) OPTIONS(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPTIONS", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS
func (mr *MockHttpRouteGroupMockRecorder) OPTIONS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockHttpRouteGroup)(nil).OPTIONS), arg0, arg1)
}

// PATCH mocks base method
func (m *MockHttpRouteGroup) PATCH(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PATCH", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// PATCH indicates an expected call of PATCH
func (mr *MockHttpRouteGroupMockRecorder) PATCH(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockHttpRouteGroup)(nil).PATCH), arg0, arg1)
}

// POST mocks base method
func (m *MockHttpRouteGroup) POST(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// POST indicates an expected call of POST
func (mr *MockHttpRouteGroupMockRecorder) POST(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockHttpRouteGroup)(nil).POST), arg0, arg1)
}

// PUT mocks base method
func (m *MockHttpRouteGroup) PUT(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUT", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// PUT indicates an expected call of PUT
func (mr *MockHttpRouteGroupMockRecorder) PUT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockHttpRouteGroup)(nil).PUT), arg0, arg1)
}

// Prefix mocks base method
func (m *MockHttpRouteGroup) Prefix(arg0 string) contract.HttpRouteGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prefix", arg0)
	ret0, _ := ret[0].(contract.HttpRouteGroup)
	return ret0
}

// Prefix indicates an expected call of Prefix
func (mr *MockHttpRouteGroupMockRecorder) Prefix(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prefix", reflect.TypeOf((*MockHttpRouteGroup)(nil).Prefix), arg0)
}

// Use mocks base method
func (m *MockHttpRouteGroup) Use(arg0 ...contract.ContextHandler) contract.HttpRouteGroup {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Use", varargs...)
	ret0, _ := ret[0].(contract.HttpRouteGroup)
	return ret0
}

// Use indicates an expected call of Use
func (mr *MockHttpRouteGroupMockRecorder) Use(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockHttpRouteGroup)(nil).Use), arg0...)
}

// MockHttpRouter is a mock of HttpRouter interface
type MockHttpRouter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRouterMockRecorder
}

// MockHttpRouterMockRecorder is the mock recorder for MockHttpRouter
type MockHttpRouterMockRecorder struct {
	mock *MockHttpRouter
}

// NewMockHttpRouter creates a new mock instance
func NewMockHttpRouter(ctrl *gomock.Controller) *MockHttpRouter {
	mock := &MockHttpRouter{ctrl: ctrl}
	mock.recorder = &MockHttpRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRouter) EXPECT() *MockHttpRouterMockRecorder {
	return m.recorder
}

// DELETE mocks base method
func (m *MockHttpRouter) DELETE(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DELETE", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// DELETE indicates an expected call of DELETE
func (mr *MockHttpRouterMockRecorder) DELETE(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DELETE", reflect.TypeOf((*MockHttpRouter)(nil).DELETE), arg0, arg1)
}

// GET mocks base method
func (m *MockHttpRouter) GET(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// GET indicates an expected call of GET
func (mr *MockHttpRouterMockRecorder) GET(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockHttpRouter)(nil).GET), arg0, arg1)
}

// Group mocks base method
func (m *MockHttpRouter) Group(arg0 string) contract.HttpRouteGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", arg0)
	ret0, _ := ret[0].(contract.HttpRouteGroup)
	return ret0
}

// Group indicates an expected call of Group
func (mr *MockHttpRouterMockRecorder) Group(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockHttpRouter)(nil).Group), arg0)
}

// Handler mocks base method
func (m *MockHttpRouter) Handler(arg0, arg1 string, arg2 http.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handler", arg0, arg1, arg2)
}

// Handler indicates an expected call of Handler
func (mr *MockHttpRouterMockRecorder) Handler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHttpRouter)(nil).Handler), arg0, arg1, arg2)
}

// HttpRouter mocks base method
func (m *MockHttpRouter) HttpRouter() *httprouter.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HttpRouter")
	ret0, _ := ret[0].(*httprouter.Router)
	return ret0
}

// HttpRouter indicates an expected call of HttpRouter
func (mr *MockHttpRouterMockRecorder) HttpRouter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpRouter", reflect.TypeOf((*MockHttpRouter)(nil).HttpRouter))
}

// OPTIONS mocks base method
func (m *MockHttpRouter) OPTIONS(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OPTIONS", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// OPTIONS indicates an expected call of OPTIONS
func (mr *MockHttpRouterMockRecorder) OPTIONS(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OPTIONS", reflect.TypeOf((*MockHttpRouter)(nil).OPTIONS), arg0, arg1)
}

// PATCH mocks base method
func (m *MockHttpRouter) PATCH(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PATCH", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// PATCH indicates an expected call of PATCH
func (mr *MockHttpRouterMockRecorder) PATCH(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PATCH", reflect.TypeOf((*MockHttpRouter)(nil).PATCH), arg0, arg1)
}

// POST mocks base method
func (m *MockHttpRouter) POST(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "POST", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// POST indicates an expected call of POST
func (mr *MockHttpRouterMockRecorder) POST(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "POST", reflect.TypeOf((*MockHttpRouter)(nil).POST), arg0, arg1)
}

// PUT mocks base method
func (m *MockHttpRouter) PUT(arg0 string, arg1 contract.ContextHandler) contract.HttpRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PUT", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRoute)
	return ret0
}

// PUT indicates an expected call of PUT
func (mr *MockHttpRouterMockRecorder) PUT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PUT", reflect.TypeOf((*MockHttpRouter)(nil).PUT), arg0, arg1)
}

// ServeHTTP mocks base method
func (m *MockHttpRouter) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockHttpRouterMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockHttpRouter)(nil).ServeHTTP), arg0, arg1)
}

// Static mocks base method
func (m *MockHttpRouter) Static(arg0, arg1 string) contract.HttpRouter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Static", arg0, arg1)
	ret0, _ := ret[0].(contract.HttpRouter)
	return ret0
}

// Static indicates an expected call of Static
func (mr *MockHttpRouterMockRecorder) Static(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Static", reflect.TypeOf((*MockHttpRouter)(nil).Static), arg0, arg1)
}
