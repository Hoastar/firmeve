// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/firmeve/firmeve/kernel/contract (interfaces: Error,ErrorStack,ErrorRender)

// Package mock is a generated GoMock package.
package mock

import (
	contract "github.com/firmeve/firmeve/kernel/contract"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockError is a mock of Error interface
type MockError struct {
	ctrl     *gomock.Controller
	recorder *MockErrorMockRecorder
}

// MockErrorMockRecorder is the mock recorder for MockError
type MockErrorMockRecorder struct {
	mock *MockError
}

// NewMockError creates a new mock instance
func NewMockError(ctrl *gomock.Controller) *MockError {
	mock := &MockError{ctrl: ctrl}
	mock.recorder = &MockErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockError) EXPECT() *MockErrorMockRecorder {
	return m.recorder
}

// Equal mocks base method
func (m *MockError) Equal(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockErrorMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockError)(nil).Equal), arg0)
}

// Error mocks base method
func (m *MockError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error
func (mr *MockErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockError)(nil).Error))
}

// Meta mocks base method
func (m *MockError) Meta() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Meta indicates an expected call of Meta
func (mr *MockErrorMockRecorder) Meta() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockError)(nil).Meta))
}

// SetMeta mocks base method
func (m *MockError) SetMeta(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMeta", arg0, arg1)
}

// SetMeta indicates an expected call of SetMeta
func (mr *MockErrorMockRecorder) SetMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMeta", reflect.TypeOf((*MockError)(nil).SetMeta), arg0, arg1)
}

// String mocks base method
func (m *MockError) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockErrorMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockError)(nil).String))
}

// Unwrap mocks base method
func (m *MockError) Unwrap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unwrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unwrap indicates an expected call of Unwrap
func (mr *MockErrorMockRecorder) Unwrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unwrap", reflect.TypeOf((*MockError)(nil).Unwrap))
}

// MockErrorStack is a mock of ErrorStack interface
type MockErrorStack struct {
	ctrl     *gomock.Controller
	recorder *MockErrorStackMockRecorder
}

// MockErrorStackMockRecorder is the mock recorder for MockErrorStack
type MockErrorStackMockRecorder struct {
	mock *MockErrorStack
}

// NewMockErrorStack creates a new mock instance
func NewMockErrorStack(ctrl *gomock.Controller) *MockErrorStack {
	mock := &MockErrorStack{ctrl: ctrl}
	mock.recorder = &MockErrorStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorStack) EXPECT() *MockErrorStackMockRecorder {
	return m.recorder
}

// Stack mocks base method
func (m *MockErrorStack) Stack() []uintptr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stack")
	ret0, _ := ret[0].([]uintptr)
	return ret0
}

// Stack indicates an expected call of Stack
func (mr *MockErrorStackMockRecorder) Stack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stack", reflect.TypeOf((*MockErrorStack)(nil).Stack))
}

// StackString mocks base method
func (m *MockErrorStack) StackString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackString")
	ret0, _ := ret[0].(string)
	return ret0
}

// StackString indicates an expected call of StackString
func (mr *MockErrorStackMockRecorder) StackString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackString", reflect.TypeOf((*MockErrorStack)(nil).StackString))
}

// MockErrorRender is a mock of ErrorRender interface
type MockErrorRender struct {
	ctrl     *gomock.Controller
	recorder *MockErrorRenderMockRecorder
}

// MockErrorRenderMockRecorder is the mock recorder for MockErrorRender
type MockErrorRenderMockRecorder struct {
	mock *MockErrorRender
}

// NewMockErrorRender creates a new mock instance
func NewMockErrorRender(ctrl *gomock.Controller) *MockErrorRender {
	mock := &MockErrorRender{ctrl: ctrl}
	mock.recorder = &MockErrorRenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorRender) EXPECT() *MockErrorRenderMockRecorder {
	return m.recorder
}

// Render mocks base method
func (m *MockErrorRender) Render(arg0 int, arg1 contract.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render
func (mr *MockErrorRenderMockRecorder) Render(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockErrorRender)(nil).Render), arg0, arg1)
}
