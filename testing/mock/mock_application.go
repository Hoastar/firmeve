// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/firmeve/firmeve/kernel/contract (interfaces: Application)

// Package mock is a generated GoMock package.
package mock

import (
	contract "github.com/firmeve/firmeve/kernel/contract"
	support "github.com/firmeve/firmeve/support"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApplication is a mock of Application interface
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Bind mocks base method
func (m *MockApplication) Bind(arg0 string, arg1 interface{}, arg2 ...support.Option) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Bind", varargs...)
}

// Bind indicates an expected call of Bind
func (mr *MockApplicationMockRecorder) Bind(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockApplication)(nil).Bind), varargs...)
}

// Boot mocks base method
func (m *MockApplication) Boot() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Boot")
}

// Boot indicates an expected call of Boot
func (mr *MockApplicationMockRecorder) Boot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boot", reflect.TypeOf((*MockApplication)(nil).Boot))
}

// Flush mocks base method
func (m *MockApplication) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush
func (mr *MockApplicationMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockApplication)(nil).Flush))
}

// Get mocks base method
func (m *MockApplication) Get(arg0 string, arg1 ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockApplicationMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockApplication)(nil).Get), varargs...)
}

// GetProvider mocks base method
func (m *MockApplication) GetProvider(arg0 string) contract.Provider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider", arg0)
	ret0, _ := ret[0].(contract.Provider)
	return ret0
}

// GetProvider indicates an expected call of GetProvider
func (mr *MockApplicationMockRecorder) GetProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockApplication)(nil).GetProvider), arg0)
}

// Has mocks base method
func (m *MockApplication) Has(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockApplicationMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockApplication)(nil).Has), arg0)
}

// HasProvider mocks base method
func (m *MockApplication) HasProvider(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProvider", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasProvider indicates an expected call of HasProvider
func (mr *MockApplicationMockRecorder) HasProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProvider", reflect.TypeOf((*MockApplication)(nil).HasProvider), arg0)
}

// IsDevelopment mocks base method
func (m *MockApplication) IsDevelopment() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDevelopment")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDevelopment indicates an expected call of IsDevelopment
func (mr *MockApplicationMockRecorder) IsDevelopment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDevelopment", reflect.TypeOf((*MockApplication)(nil).IsDevelopment))
}

// IsProduction mocks base method
func (m *MockApplication) IsProduction() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProduction")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProduction indicates an expected call of IsProduction
func (mr *MockApplicationMockRecorder) IsProduction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProduction", reflect.TypeOf((*MockApplication)(nil).IsProduction))
}

// IsTesting mocks base method
func (m *MockApplication) IsTesting() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTesting")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTesting indicates an expected call of IsTesting
func (mr *MockApplicationMockRecorder) IsTesting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTesting", reflect.TypeOf((*MockApplication)(nil).IsTesting))
}

// Make mocks base method
func (m *MockApplication) Make(arg0 interface{}, arg1 ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Make", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Make indicates an expected call of Make
func (mr *MockApplicationMockRecorder) Make(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockApplication)(nil).Make), varargs...)
}

// Mode mocks base method
func (m *MockApplication) Mode() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(byte)
	return ret0
}

// Mode indicates an expected call of Mode
func (mr *MockApplicationMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockApplication)(nil).Mode))
}

// Register mocks base method
func (m *MockApplication) Register(arg0 contract.Provider, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", arg0, arg1)
}

// Register indicates an expected call of Register
func (mr *MockApplicationMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockApplication)(nil).Register), arg0, arg1)
}

// RegisterMultiple mocks base method
func (m *MockApplication) RegisterMultiple(arg0 []contract.Provider, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterMultiple", arg0, arg1)
}

// RegisterMultiple indicates an expected call of RegisterMultiple
func (mr *MockApplicationMockRecorder) RegisterMultiple(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMultiple", reflect.TypeOf((*MockApplication)(nil).RegisterMultiple), arg0, arg1)
}

// Remove mocks base method
func (m *MockApplication) Remove(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove
func (mr *MockApplicationMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockApplication)(nil).Remove), arg0)
}

// Reset mocks base method
func (m *MockApplication) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset
func (mr *MockApplicationMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockApplication)(nil).Reset))
}

// Resolve mocks base method
func (m *MockApplication) Resolve(arg0 interface{}, arg1 ...interface{}) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Resolve", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Resolve indicates an expected call of Resolve
func (mr *MockApplicationMockRecorder) Resolve(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockApplication)(nil).Resolve), varargs...)
}

// SetMode mocks base method
func (m *MockApplication) SetMode(arg0 byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMode", arg0)
}

// SetMode indicates an expected call of SetMode
func (mr *MockApplicationMockRecorder) SetMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMode", reflect.TypeOf((*MockApplication)(nil).SetMode), arg0)
}

// Version mocks base method
func (m *MockApplication) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (mr *MockApplicationMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockApplication)(nil).Version))
}
